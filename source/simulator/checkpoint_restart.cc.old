#include <elaspect/simulator.h>
#include <elaspect/utilities.h>

#include <deal.II/base/mpi.h>
#include <deal.II/grid/grid_tools.h>
#include <deal.II/distributed/solution_transfer.h>

namespace elaspect
{
  namespace
  {
    void move_file (const std::string &old_name,
                    const std::string &new_name)
    {
      int error = system(("mv " + old_name + " " + new_name).c_str());

      // If the above failed, e.g. because there is no command-line
      // available, try with internal functions.
      if (error != 0)
      {
        if (Utilities::fexists(new_name))
        {
          error = remove(new_name.c_str());
          AssertThrow (error == 0, ExcMessage(std::string ("Unable to remove file: "
                                                           + new_name
                                                           + ", although it seems to exist. "
                                                           + "The error code is "
                                                           + Utilities::to_string(error) + ".")));
        }

        error = rename(old_name.c_str(),new_name.c_str());
        AssertThrow (error == 0, ExcMessage(std::string ("Unable to rename files: ")
                                            +
                                            old_name + " -> " + new_name
                                            + ". The error code is "
                                            + Utilities::to_string(error) + "."));
      }
    }
  }


  namespace
  {
    /**
     * Save a few of the critical parameters of the current run in the
     * checkpoint file. We will load them again later during
     * restart to verify that they are the same as the ones set
     * in the input file active during restart.
     */
    template <int dim>
    void save_critical_parameters (const Parameters<dim> &parameters,
                                   elaspect::oarchive &oa)
    {
      oa << parameters.convert_to_years;
      oa << parameters.include_pore_fluid;
      oa << parameters.displacement_degree;
      oa << parameters.fluid_pressure_degree;
      oa << parameters.temperature_degree;
      oa << parameters.n_gaussian_points;
      oa << parameters.n_compositional_fields;
    }


    /**
     * Load a few of the critical parameters from a checkpoint file during
     * restart to verify that they are the same as the ones currently set
     * in the input file active during restart.
     */
    template <int dim>
    void load_and_check_critical_parameters (const Parameters<dim> &parameters,
                                             elaspect::iarchive &ia)
    {
      bool convert_to_years;
      ia >> convert_to_years;
      AssertThrow (convert_to_years == parameters.convert_to_years,
                   ExcMessage ("The value provided for `Use years in output instead of seconds' that was stored "
                               "in the checkpoint file is not the same as the one "
                               "you currently set in your input file. "
                               "These need to be the same during restarting "
                               "from a checkpoint."));

      bool include_pore_fluid;
      ia >> include_pore_fluid;
      AssertThrow (include_pore_fluid == parameters.include_pore_fluid,
                   ExcMessage ("The pore fluid mode that was stored "
                               "in the checkpoint file is not the same as the one "
                               "you currently set in your input file. "
                               "These need to be the same during restarting "
                               "from a checkpoint."));

      unsigned int displacement_degree;
      ia >> displacement_degree;
      AssertThrow (displacement_degree == parameters.displacement_degree,
                   ExcMessage ("The displacement polynomial degree that was stored "
                               "in the checkpoint file is not the same as the one "
                               "you currently set in your input file. "
                               "These need to be the same during restarting "
                               "from a checkpoint."));

      unsigned int fluid_pressure_degree;
      ia >> fluid_pressure_degree;
      AssertThrow (fluid_pressure_degree == parameters.fluid_pressure_degree,
                   ExcMessage ("The fluid pressure polynomial degree that was stored "
                               "in the checkpoint file is not the same as the one "
                               "you currently set in your input file. "
                               "These need to be the same during restarting "
                               "from a checkpoint."));

      unsigned int temperature_degree;
      ia >> temperature_degree;
      AssertThrow (temperature_degree == parameters.temperature_degree,
                   ExcMessage ("The temperature polynomial degree that was stored "
                               "in the checkpoint file is not the same as the one "
                               "you currently set in your input file. "
                               "These need to be the same during restarting "
                               "from a checkpoint."));

      unsigned int n_gaussian_points;
      ia >> n_gaussian_points;
      AssertThrow (n_gaussian_points == parameters.n_gaussian_points,
                   ExcMessage ("The number of Gaussian points in each dimension "
                               "that was stored in the checkpoint file is not the "
                               "same as the one ou currently set in your input file. "
                               "These need to be the same during restarting "
                               "from a checkpoint."));

      unsigned int n_compositional_fields;
      ia >> n_compositional_fields;
      AssertThrow (n_compositional_fields == parameters.n_compositional_fields,
                   ExcMessage ("The number of compositional fields that was stored "
                               "in the checkpoint file is not the same as the one "
                               "you currently set in your input file. "
                               "These need to be the same during restarting "
                               "from a checkpoint."));
    }
  }


  template <int dim>
  void Simulator<dim>::create_snapshot()
  {

  }
}
